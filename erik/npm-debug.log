0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'webworker-threads' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose cache add [ 'webworker-threads', null ]
6 verbose cache add name=undefined spec="webworker-threads" args=["webworker-threads",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: 'webworker-threads',
7 verbose parsed url   path: 'webworker-threads',
7 verbose parsed url   href: 'webworker-threads' }
8 silly lockFile 8313e9b2-webworker-threads webworker-threads
9 verbose lock webworker-threads C:\Users\iBBY\AppData\Roaming\npm-cache\8313e9b2-webworker-threads.lock
10 silly lockFile 8313e9b2-webworker-threads webworker-threads
11 silly lockFile 8313e9b2-webworker-threads webworker-threads
12 verbose addNamed [ 'webworker-threads', '' ]
13 verbose addNamed [ null, '*' ]
14 silly lockFile 0e1aa9d7-webworker-threads webworker-threads@
15 verbose lock webworker-threads@ C:\Users\iBBY\AppData\Roaming\npm-cache\0e1aa9d7-webworker-threads.lock
16 silly addNameRange { name: 'webworker-threads', range: '*', hasData: false }
17 verbose url raw webworker-threads
18 verbose url resolving [ 'https://registry.npmjs.org/', './webworker-threads' ]
19 verbose url resolved https://registry.npmjs.org/webworker-threads
20 info trying registry request attempt 1 at 16:45:12
21 verbose etag "EK1PK0YAYO65Z39999XGK2QLV"
22 http GET https://registry.npmjs.org/webworker-threads
23 http 304 https://registry.npmjs.org/webworker-threads
24 silly registry.get cb [ 304,
24 silly registry.get   { date: 'Mon, 02 Jun 2014 21:45:50 GMT',
24 silly registry.get     server: 'Apache',
24 silly registry.get     via: '1.1 varnish',
24 silly registry.get     'last-modified': 'Mon, 02 Jun 2014 21:45:50 GMT',
24 silly registry.get     'cache-control': 'max-age=1',
24 silly registry.get     etag: '"EK1PK0YAYO65Z39999XGK2QLV"',
24 silly registry.get     'x-served-by': 'cache-lax1420-LAX',
24 silly registry.get     'x-cache': 'MISS',
24 silly registry.get     'x-cache-hits': '0',
24 silly registry.get     'x-timer': 'S1401745550.338276,VS0,VE137',
24 silly registry.get     vary: 'Accept',
24 silly registry.get     'content-length': '0',
24 silly registry.get     'keep-alive': 'timeout=10, max=50',
24 silly registry.get     connection: 'Keep-Alive' } ]
25 verbose etag webworker-threads from cache
26 silly addNameRange number 2 { name: 'webworker-threads', range: '*', hasData: true }
27 silly addNameRange versions [ 'webworker-threads',
27 silly addNameRange   [ '0.3.0',
27 silly addNameRange     '0.3.1',
27 silly addNameRange     '0.3.2',
27 silly addNameRange     '0.4.0',
27 silly addNameRange     '0.4.1',
27 silly addNameRange     '0.4.2',
27 silly addNameRange     '0.4.3',
27 silly addNameRange     '0.4.4',
27 silly addNameRange     '0.4.5',
27 silly addNameRange     '0.4.6',
27 silly addNameRange     '0.4.7',
27 silly addNameRange     '0.4.8',
27 silly addNameRange     '0.4.9',
27 silly addNameRange     '0.4.10',
27 silly addNameRange     '0.4.11',
27 silly addNameRange     '0.4.12',
27 silly addNameRange     '0.4.13' ] ]
28 verbose addNamed [ 'webworker-threads', '0.4.13' ]
29 verbose addNamed [ '0.4.13', '0.4.13' ]
30 silly lockFile e094df71-webworker-threads-0-4-13 webworker-threads@0.4.13
31 verbose lock webworker-threads@0.4.13 C:\Users\iBBY\AppData\Roaming\npm-cache\e094df71-webworker-threads-0-4-13.lock
32 silly lockFile e094df71-webworker-threads-0-4-13 webworker-threads@0.4.13
33 silly lockFile e094df71-webworker-threads-0-4-13 webworker-threads@0.4.13
34 silly lockFile 0e1aa9d7-webworker-threads webworker-threads@
35 silly lockFile 0e1aa9d7-webworker-threads webworker-threads@
36 silly resolved [ { name: 'webworker-threads',
36 silly resolved     version: '0.4.13',
36 silly resolved     main: 'build/Release/WebWorkerThreads.node',
36 silly resolved     description: 'Lightweight Web Worker API implementation with native threads',
36 silly resolved     keywords: [ 'threads', 'web worker', 'a gogo' ],
36 silly resolved     author: { name: 'Audrey Tang', email: 'audreyt@audreyt.org' },
36 silly resolved     homepage: 'https://github.com/audreyt/node-webworker-threads',
36 silly resolved     bugs:
36 silly resolved      { url: 'http://github.com/audreyt/node-webworker-threads/issues',
36 silly resolved        email: 'audreyt@audreyt.org' },
36 silly resolved     licenses: [ [Object], [Object] ],
36 silly resolved     repository:
36 silly resolved      { type: 'git',
36 silly resolved        url: 'http://github.com/audreyt/node-webworker-threads.git' },
36 silly resolved     scripts:
36 silly resolved      { js: 'env PATH=./node_modules/.bin:"$PATH" lsc -cj package.ls;\ngcc deps/minifier/src/minify.c -o deps/minifier/bin/minify;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/worker.ls                    > src/worker.js;\n./deps/minifier/bin/minify kWorker_js            < src/worker.js          > src/worker.js.c;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/events.ls                    > src/events.js;\n./deps/minifier/bin/minify kEvents_js            < src/events.js          > src/events.js.c;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/createPool.ls                > src/createPool.js;\n./deps/minifier/bin/minify kCreatePool_js        < src/createPool.js      > src/createPool.js.c;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/thread_nextTick.ls           > src/thread_nextTick.js;\n./deps/minifier/bin/minify kThread_nextTick_js 1 < src/thread_nextTick.js > src/thread_nextTick.js.c;\nenv PATH=./node_modules/.bin:"$PATH" lsc -cbp src/load.ls                      > src/load.js;\n./deps/minifier/bin/minify kLoad_js 1 1          < src/load.js            > src/load.js.c;',
36 silly resolved        install: 'node-gyp rebuild' },
36 silly resolved     dependencies: { nan: '0.8.x' },
36 silly resolved     devDependencies: { LiveScript: '1.2.x' },
36 silly resolved     gypfile: true,
36 silly resolved     engines: { node: '>= 0.8.0' },
36 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
36 silly resolved     readme: '# WebWorker Threads\n\nThis is based on @xk (jorgechamorro)\'s [Threads A GoGo for Node.js](https://github.com/audreyt/node-threads-a-gogo), but with an API conforming to the [Web Worker standard](http://www.w3.org/TR/workers/).\n\nThis module provides an asynchronous, evented and/or continuation passing style API for moving blocking/longish CPU-bound tasks out of Node\'s event loop to JavaScript threads that run in parallel in the background and that use all the available CPU cores automatically; all from within a single Node process.\n\nOn Unix (including Linux and OS X), this module requires Node.js 0.8.0+ and a working node-gyp toolchain, which in turn requires make and C/C++.\nFor example, on OS X, you could install XCode from Apple, and then use it to install the command line tools (under Preferences -> Downloads).\n\nOn Windows, this module requires Node.js 0.9.3+ and a working [node-gyp toolchain](http://dailyjs.com/2012/05/17/windows-and-node-3/).\n\n## Illustrated Writeup\n\nThere is an [illustrated writeup](http://aosabook.org/en/posa/from-socialcalc-to-ethercalc.html#multi-core-scaling) for the original use case of this module:\n\n<img src="http://aosabook.org/en/posa/ethercalc-images/scaling-threads.png" alt="Event Threaded Server (multi-core)" width="100%">\n\n## Installing the module\n\nWith [npm](http://npmjs.org/):\n\n    npm install webworker-threads\n\nSample usage (adapted from [MDN](https://developer.mozilla.org/en-US/docs/DOM/Using_web_workers#Passing_data)):\n\n```js\nvar Worker = require(\'webworker-threads\').Worker;\n// var w = new Worker(\'worker.js\'); // Standard API\n\n// You may also pass in a function:\nvar worker = new Worker(function(){\n  postMessage("I\'m working before postMessage(\'ali\').");\n  onmessage = function(event) {\n    postMessage(\'Hi \' + event.data);\n    self.close();\n  };\n});\nworker.onmessage = function(event) {\n  console.log("Worker said : " + event.data);\n};\nworker.postMessage(\'ali\');\n```\n\nA more involved example in [LiveScript](http://livescript.net/) syntax, with five threads:\n\n```coffee\n{ Worker } = require \\webworker-threads\n\nfor til 5 => (new Worker ->\n  fibo = (n) -> if n > 1 then fibo(n - 1) + fibo(n - 2) else 1\n  @onmessage = ({ data }) -> postMessage fibo data\n)\n  ..onmessage = ({ data }) ->\n    console.log "[#{ @thread.id }] #data"\n    @postMessage Math.ceil Math.random! * 30\n  ..postMessage Math.ceil Math.random! * 30\n\ndo spin = -> process.nextTick spin\n```\n\n## Introduction\n\nAfter the initialization phase of a Node program, whose purpose is to setup listeners and callbacks to be executed in response to events, the next phase, the proper execution of the program, is orchestrated by the event loop whose duty is to [juggle events, listeners and callbacks quickly and without any hiccups nor interruptions that would ruin its performance](http://youtube.com/v/D0uA_NOb0PE?autoplay=1)\n\nBoth the event loop and said listeners and callbacks run sequentially in a single thread of execution, Node\'s main thread. If any of them ever blocks, nothing else will happen for the duration of the block: no more events will be handled, no more callbacks nor listeners nor timeouts nor nextTick()ed functions will have the chance to run and do their job, because they won\'t be called by the blocked event loop, and the program will turn sluggish at best, or appear to be frozen and dead at worst.\n\n### What is WebWorker-Threads\n\n`webworker-threads` provides an asynchronous API for CPU-bound tasks that\'s missing in Node.js:\n\n``` javascript\nvar Worker = require(\'webworker-threads\').Worker;\nrequire(\'http\').createServer(function (req,res) {\n  var fibo = new Worker(function() {\n    function fibo (n) {\n      return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n    }\n    onmessage = function (event) {\n      postMessage(fibo(event.data));\n    }\n  });\n  fibo.onmessage = function (event) {\n    res.end(\'fib(40) = \' + event.data);\n  };\n  fibo.postMessage(40);\n}).listen(port);\n```\n\nAnd it won\'t block the event loop because for each request, the `fibo` worker will run in parallel in a separate background thread.\n\n## API\n\n### Module API\n``` javascript\nvar Threads= require(\'webworker-threads\');\n```\n##### .Worker\n`new Threads.Worker( [ file | function ] )` returns a Worker object.\n##### .create()\n`Threads.create( /* no arguments */ )` returns a thread object.\n##### .createPool( numThreads )\n`Threads.createPool( numberOfThreads )` returns a threadPool object.\n\n---\n### Web Worker API\n``` javascript\nvar worker= new Threads.Worker(\'worker.js\');\nvar worker= new Threads.Worker(function(){ ... });\nvar worker= new Threads.Worker();\n```\n##### .postMessage( data )\n`worker.postMessage({ x: 1, y: 2 })` sends a data structure into the worker. The worker can receive it using the `onmessage` handler.\n##### .onmessage\n`worker.onmessage = function (event) { console.log(event.data) };` receives data from the worker\'s `postMessage` calls.\n##### .terminate()\n`worker.terminate()` terminates the worker thread.\n##### .addEventListener( type, cb )\n`worker.addEventListener(\'message\', callback)` is equivalent to setting `worker.onmesssage = callback`.\n##### .dispatchEvent( event )\nCurrently unimplemented.\n##### .removeEventListener( type )\nCurrently unimplemented.\n##### .thread\nReturns the underlying `thread` object; see the next section for details.\nNote that this attribute is implementation-specific, and not part of W3C Web Worker API.\n\n---\n### Thread API\n``` javascript\nvar thread= Threads.create();\n```\n##### .id\n`thread.id` is a sequential thread serial number.\n##### .load( absolutePath [, cb] )\n`thread.load( absolutePath [, cb] )` reads the file at `absolutePath` and `thread.eval(fileContents, cb)`.\n##### .eval( program [, cb])\n`thread.eval( program [, cb])` converts `program.toString()` and eval()s it in the thread\'s global context, and (if provided) returns the completion value to `cb(err, completionValue)`.\n##### .on( eventType, listener )\n`thread.on( eventType, listener )` registers the listener `listener(data)` for any events of `eventType` that the thread `thread` may emit.\n##### .once( eventType, listener )\n`thread.once( eventType, listener )` is like `thread.on()`, but the listener will only be called once.\n##### .removeAllListeners( [eventType] )\n`thread.removeAllListeners( [eventType] )` deletes all listeners for all eventTypes. If `eventType` is provided, deletes all listeners only for the event type `eventType`.\n##### .emit( eventType, eventData [, eventData ... ] )\n`thread.emit( eventType, eventData [, eventData ... ] )` emits an event of `eventType` with `eventData` inside the thread `thread`. All its arguments are .toString()ed.\n##### .destroy( /* no arguments */ )\n`thread.destroy( /* no arguments */ )` destroys the thread.\n\n---\n### Thread pool API\n``` javascript\nthreadPool= Threads.createPool( numberOfThreads );\n```\n##### .load( absolutePath [, cb] )\n`threadPool.load( absolutePath [, cb] )` runs `thread.load( absolutePath [, cb] )` in all the pool\'s threads.\n##### .any.eval( program, cb )\n`threadPool.any.eval( program, cb )` is like `thread.eval()`, but in any of the pool\'s threads.\n##### .any.emit( eventType, eventData [, eventData ... ] )\n`threadPool.any.emit( eventType, eventData [, eventData ... ] )` is like `thread.emit()`, but in any of the pool\'s threads.\n##### .all.eval( program, cb )\n`threadPool.all.eval( program, cb )` is like `thread.eval()`, but in all the pool\'s threads.\n##### .all.emit( eventType, eventData [, eventData ... ] )\n`threadPool.all.emit( eventType, eventData [, eventData ... ] )` is like `thread.emit()`, but in all the pool\'s threads.\n##### .on( eventType, listener )\n`threadPool.on( eventType, listener )` is like `thread.on()`, registers listeners for events from any of the threads in the pool.\n##### .totalThreads()\n`threadPool.totalThreads()` returns the number of threads in this pool: as supplied in `.createPool( number )`\n##### .idleThreads()\n`threadPool.idleThreads()` returns the number of threads in this pool that are currently idle (sleeping)\n##### .pendingJobs()\n`threadPool.pendingJobs()` returns the number of jobs pending.\n##### .destroy( [ rudely ] )\n`threadPool.destroy( [ rudely ] )` waits until `pendingJobs()` is zero and then destroys the pool. If `rudely` is truthy, then it doesn\'t wait for `pendingJobs === 0`.\n\n---\n### Global Web Worker API\n\nInside every Worker instance from webworker-threads, there\'s a global `self` object with these properties:\n\n##### .postMessage( data )\n`postMessage({ x: 1, y: 2 })` sends a data structure back to the main thread.\n##### .onmessage\n`onmessage = function (event) { ... }` receives data from the main thread\'s `.postMessage` calls.\n##### .close()\n`close()` stops the current thread.\n##### .addEventListener( type, cb )\n`addEventListener(\'message\', callback)` is equivalent to setting `self.onmesssage = callback`.\n##### .dispatchEvent( event )\n`dispatchEvent({ type: \'message\', data: data })` is the same as `self.postMessage(data)`.\n##### .removeEventListener( type )\nCurrently unimplemented.\n##### .importScripts( file [, file...] )\n`importScripts(\'a.js\', \'b.js\')` loads one or more files from the disk and `eval()` them in the worker\'s instance scope.\n##### .thread\nThe underlying `thread` object; see the next section for details.\nNote that this attribute is implementation-specific, and not part of W3C Web Worker API.\n\n---\n### Global Thread API\n\nInside every thread .create()d by webworker-threads, there\'s a global `thread` object with these properties:\n##### .id\n`thread.id` is the serial number of this thread\n##### .on( eventType, listener )\n`thread.on( eventType, listener )` is just like `thread.on()` above.\n##### .once( eventType, listener )\n`thread.once( eventType, listener )` is just like `thread.once()` above.\n##### .emit( eventType, eventData [, eventData ... ] )\n`thread.emit( eventType, eventData [, eventData ... ] )` is just like `thread.emit()` above.\n##### .removeAllListeners( [eventType] )\n`thread.removeAllListeners( [eventType] )` is just like `thread.removeAllListeners()` above.\n##### .nextTick( function )\n`thread.nextTick( function )` is like `process.nextTick()`, but much faster.\n\n---\n### Global Helper API\n\nInside every thread .create()d by webworker-threads, there are some helpers:\n\n##### console.log(arg1 [, arg2 ...])\nSame as `console.log` on the main process.\n\n##### console.error(arg1 [, arg2 ...])\nSame as `console.log`, except it prints to stderr.\n\n##### puts(arg1 [, arg2 ...])\n`puts(arg1 [, arg2 ...])` converts .toString()s and prints its arguments to stdout.\n\n-----------\nWIP WIP WIP\n-----------\nNote that everything below this line is under construction and subject to change.\n-----------\n\n## Examples\n\n**A.-** Here\'s a program that makes Node\'s event loop spin freely and as fast as possible: it simply prints a dot to the console in each turn:\n\n    cat examples/quickIntro_loop.js\n    \n``` javascript\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**B.-** Here\'s another program that adds to the one above a fibonacci(35) call in each turn, a CPU-bound task that takes quite a while to complete and that blocks the event loop making it spin slowly and clumsily. The point is simply to show that you can\'t put a job like that in the event loop because Node will stop performing properly when its event loop can\'t spin fast and freely due to a callback/listener/nextTick()ed function that\'s blocking.\n\n    cat examples/quickIntro_blocking.js\n\n``` javascript\nfunction fibo (n) {\n  return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n}\n\n(function fiboLoop () {\n  process.stdout.write(fibo(35).toString());\n  process.nextTick(fiboLoop);\n})();\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**C.-** The program below uses `webworker-threads` to run the fibonacci(35) calls in a background thread, so Node\'s event loop isn\'t blocked at all and can spin freely again at full speed:\n\n    cat examples/quickIntro_oneThread.js\n  \n``` javascript\nfunction fibo (n) {\n  return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n}\n\nfunction cb (err, data) {\n  process.stdout.write(data);\n  this.eval(\'fibo(35)\', cb);\n}\n\nvar thread= require(\'webworker-threads\').create();\n\nthread.eval(fibo).eval(\'fibo(35)\', cb);\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**D.-** This example is almost identical to the one above, only that it creates 5 threads instead of one, each running a fibonacci(35) in parallel and in parallel too with Node\'s event loop that keeps spinning happily at full speed in its own thread:\n\n    cat examples/quickIntro_fiveThreads.js\n  \n``` javascript\nfunction fibo (n) {\n  return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n}\n\nfunction cb (err, data) {\n  process.stdout.write(" ["+ this.id+ "]"+ data);\n  this.eval(\'fibo(35)\', cb);\n}\n\nvar Threads= require(\'webworker-threads\');\n\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\nThreads.create().eval(fibo).eval(\'fibo(35)\', cb);\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**E.-** The next one asks `webworker-threads` to create a pool of 10 background threads, instead of creating them manually one by one:\n\n    cat examples/multiThread.js\n\n``` javascript\nfunction fibo (n) {\n  return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n}\n\nvar numThreads= 10;\nvar threadPool= require(\'webworker-threads\').createPool(numThreads).all.eval(fibo);\n\nthreadPool.all.eval(\'fibo(35)\', function cb (err, data) {\n  process.stdout.write(" ["+ this.id+ "]"+ data);\n  this.eval(\'fibo(35)\', cb);\n});\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**F.-** This is a demo of the `webworker-threads` eventEmitter API, using one thread:\n\n    cat examples/quickIntro_oneThreadEvented.js\n\n``` javascript\nvar thread= require(\'webworker-threads\').create();\nthread.load(__dirname + \'/quickIntro_evented_childThreadCode.js\');\n\n/*\n  This is the code that\'s .load()ed into the child/background thread:\n  \n  function fibo (n) {\n    return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n  }\n\n  thread.on(\'giveMeTheFibo\', function onGiveMeTheFibo (data) {\n    this.emit(\'theFiboIs\', fibo(+data)); //Emits \'theFiboIs\' in the parent/main thread.\n  });\n  \n*/\n\n//Emit \'giveMeTheFibo\' in the child/background thread.\nthread.emit(\'giveMeTheFibo\', 35);\n\n//Listener for the \'theFiboIs\' events emitted by the child/background thread.\nthread.on(\'theFiboIs\', function cb (data) {\n  process.stdout.write(data);\n  this.emit(\'giveMeTheFibo\', 35);\n});\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n**G.-** This is a demo of the `webworker-threads` eventEmitter API, using a pool of threads:\n\n    cat examples/quickIntro_multiThreadEvented.js\n\n``` javascript\nvar numThreads= 10;\nvar threadPool= require(\'webworker-threads\').createPool(numThreads);\nthreadPool.load(__dirname + \'/quickIntro_evented_childThreadCode.js\');\n\n/*\n  This is the code that\'s .load()ed into the child/background threads:\n  \n  function fibo (n) {\n    return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n  }\n\n  thread.on(\'giveMeTheFibo\', function onGiveMeTheFibo (data) {\n    this.emit(\'theFiboIs\', fibo(+data)); //Emits \'theFiboIs\' in the parent/main thread.\n  });\n  \n*/\n\n//Emit \'giveMeTheFibo\' in all the child/background threads.\nthreadPool.all.emit(\'giveMeTheFibo\', 35);\n\n//Listener for the \'theFiboIs\' events emitted by the child/background threads.\nthreadPool.on(\'theFiboIs\', function cb (data) {\n  process.stdout.write(" ["+ this.id+ "]"+ data);\n  this.emit(\'giveMeTheFibo\', 35);\n});\n\n(function spinForever () {\n  process.nextTick(spinForever);\n})();\n```\n\n## More examples\n\nThe `examples` directory contains a few more examples:\n\n* [ex01_basic](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex01_basic.md): Running a simple function in a thread.\n* [ex02_events](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex02_events.md): Sending events from a worker thread.\n* [ex03_ping_pong](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex03_ping_pong.md): Sending events both ways between the main thread and a worker thread.\n* [ex04_main](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex04_main.md): Loading the worker code from a file.\n* [ex05_pool](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex05_pool.md): Using the thread pool.\n* [ex06_jason](https://github.com/xk/node-threads-a-gogo/blob/master/examples/ex06_jason.md): Passing complex objects to threads.\n\n## Rationale\n\n[Node.js](http://nodejs.org) is the most awesome, cute and super-sexy piece of free, open source software.\n\nIts event loop can spin as fast and smooth as a turbo, and roughly speaking, **the faster it spins, the more power it delivers**. That\'s why [@ryah](http://twitter.com/ryah) took great care to ensure that no -possibly slow- I/O operations could ever block it: a pool of background threads (thanks to [Marc Lehmann\'s libeio library](http://software.schmorp.de/pkg/libeio.html)) handle any blocking I/O calls in the background, in parallel.\n\nIn Node it\'s verboten to write a server like this:\n\n``` javascript\nhttp.createServer(function (req,res) {\n  res.end( fs.readFileSync(path) );\n}).listen(port);\n```\nBecause synchronous I/O calls **block the turbo**, and without proper boost, Node.js begins to stutter and behaves clumsily. To avoid it there\'s the asynchronous version of `.readFile()`, in continuation passing style, that takes a callback:\n\n``` javascript\nfs.readfile(path, function cb (err, data) { /* ... */ });\n```\n\nIt\'s cool, we love it (*), and there\'s hundreds of ad hoc built-in functions like this in Node to help us deal with almost any variety of possibly slow, blocking I/O.\n\n### But what\'s with longish, CPU-bound tasks?\n\nHow do you avoid blocking the event loop, when the task at hand isn\'t I/O bound, and lasts more than a few fractions of a millisecond?\n\n``` javascript\nhttp.createServer(function cb (req,res) {\n  res.end( fibonacci(40) );\n}).listen(port);\n```\n\nYou simply can\'t, because there\'s no way... well, there wasn\'t before `webworker-threads`.\n\n### Why Threads\n\nThreads (kernel threads) are very interesting creatures. They provide:\n\n1.- Parallelism: All the threads run in parallel. On a single core processor, the CPU is switched rapidly back and forth among the threads providing the illusion that the threads are running in parallel, albeit on a slower CPU than the real one. With 10 compute-bound threads in a process, the threads would appear to be running in parallel, each one on a CPU with 1/10th the speed of the real CPU. On a multi-core processor, threads are truly running in parallel, and get time-sliced when the number of threads exceed the number of cores. So with 12 compute bound threads on a quad-core processor each thread will appear to run at 1/3rd of the nominal core speed.\n\n2.- Fairness: No thread is more important than another, cores and CPU slices are fairly distributed among threads by the OS scheduler.\n\n3.- Threads fully exploit all the available CPU resources in your system. On a loaded system running many tasks in many threads, the more cores there are, the faster the threads will complete. Automatically.\n\n4.- The threads of a process share exactly the same address space, that of the process they belong to. Every thread can access every memory address within the process\' address space. This is a very appropriate setup when the threads are actually part of the same job and are actively and closely cooperating with each other. Passing a reference to a chunk of data via a pointer is many orders of magnitude faster than transferring a copy of the data via IPC.\n\n### Why not multiple processes.\n\nThe "can\'t block the event loop" problem is inherent to Node\'s evented model. No matter how many Node processes you have running as a [Node-cluster](http://blog.nodejs.org/2011/10/04/an-easy-way-to-build-scalable-network-programs/), it won\'t solve its issues with CPU-bound tasks.\n\nLaunch a cluster of N Nodes running the example B (`quickIntro_blocking.js`) above, and all you\'ll get is N -instead of one- Nodes with their event loops blocked and showing a sluggish performance.\n',
36 silly resolved     readmeFilename: 'README.md',
36 silly resolved     _id: 'webworker-threads@0.4.13',
36 silly resolved     _from: 'webworker-threads@' } ]
37 info install webworker-threads@0.4.13 into C:\mgl-proyecto-nodejs\erik
38 info installOne webworker-threads@0.4.13
39 info C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads unbuild
40 verbose tar unpack C:\Users\iBBY\AppData\Roaming\npm-cache\webworker-threads\0.4.13\package.tgz
41 silly lockFile 7c417583-k-node-modules-webworker-threads tar://C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads
42 verbose lock tar://C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads C:\Users\iBBY\AppData\Roaming\npm-cache\7c417583-k-node-modules-webworker-threads.lock
43 silly lockFile e843e24b-orker-threads-0-4-13-package-tgz tar://C:\Users\iBBY\AppData\Roaming\npm-cache\webworker-threads\0.4.13\package.tgz
44 verbose lock tar://C:\Users\iBBY\AppData\Roaming\npm-cache\webworker-threads\0.4.13\package.tgz C:\Users\iBBY\AppData\Roaming\npm-cache\e843e24b-orker-threads-0-4-13-package-tgz.lock
45 silly gunzTarPerm modes [ '755', '644' ]
46 silly gunzTarPerm extractEntry package.json
47 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
48 silly gunzTarPerm extractEntry .npmignore
49 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
50 silly gunzTarPerm extractEntry README.md
51 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
52 silly gunzTarPerm extractEntry LICENSE
53 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
54 silly gunzTarPerm extractEntry CHANGES.md
55 silly gunzTarPerm modified mode [ 'CHANGES.md', 438, 420 ]
56 silly gunzTarPerm extractEntry TODO.md
57 silly gunzTarPerm modified mode [ 'TODO.md', 438, 420 ]
58 silly gunzTarPerm extractEntry benchmark/b00_fibonacci_server_no_threads.js
59 silly gunzTarPerm modified mode [ 'benchmark/b00_fibonacci_server_no_threads.js', 438, 420 ]
60 silly gunzTarPerm extractEntry benchmark/b01_fibonacci_server_threads.js
61 silly gunzTarPerm modified mode [ 'benchmark/b01_fibonacci_server_threads.js', 438, 420 ]
62 silly gunzTarPerm extractEntry benchmark/b02_fibonacci_server_threads_pool.js
63 silly gunzTarPerm modified mode [ 'benchmark/b02_fibonacci_server_threads_pool.js', 438, 420 ]
64 silly gunzTarPerm extractEntry benchmark/b03_fibonacci_server_clustered.js
65 silly gunzTarPerm modified mode [ 'benchmark/b03_fibonacci_server_clustered.js', 438, 420 ]
66 silly gunzTarPerm extractEntry benchmark/b04_only_quick.js
67 silly gunzTarPerm modified mode [ 'benchmark/b04_only_quick.js', 438, 420 ]
68 silly gunzTarPerm extractEntry benchmark/pi.js
69 silly gunzTarPerm modified mode [ 'benchmark/pi.js', 438, 420 ]
70 silly gunzTarPerm extractEntry benchmark/pi_precompiled.js
71 silly gunzTarPerm modified mode [ 'benchmark/pi_precompiled.js', 438, 420 ]
72 silly gunzTarPerm extractEntry benchmark/doubles.c
73 silly gunzTarPerm modified mode [ 'benchmark/doubles.c', 438, 420 ]
74 silly gunzTarPerm extractEntry benchmark/pi.c
75 silly gunzTarPerm modified mode [ 'benchmark/pi.c', 438, 420 ]
76 silly gunzTarPerm extractEntry benchmark/pi.rb
77 silly gunzTarPerm modified mode [ 'benchmark/pi.rb', 438, 420 ]
78 silly gunzTarPerm extractEntry AUTHORS
79 silly gunzTarPerm modified mode [ 'AUTHORS', 438, 420 ]
80 silly gunzTarPerm extractEntry deps/minifier/bin/minify
81 silly gunzTarPerm modified mode [ 'deps/minifier/bin/minify', 438, 420 ]
82 silly gunzTarPerm extractEntry deps/minifier/src/minify.c
83 silly gunzTarPerm modified mode [ 'deps/minifier/src/minify.c', 438, 420 ]
84 silly gunzTarPerm extractEntry deps/minifier/src/test
85 silly gunzTarPerm modified mode [ 'deps/minifier/src/test', 438, 420 ]
86 silly gunzTarPerm extractEntry deps/minifier/src/test.include.c
87 silly gunzTarPerm modified mode [ 'deps/minifier/src/test.include.c', 438, 420 ]
88 silly gunzTarPerm extractEntry deps/minifier/src/test_minifier.c
89 silly gunzTarPerm modified mode [ 'deps/minifier/src/test_minifier.c', 438, 420 ]
90 silly gunzTarPerm extractEntry examples/demo.js
91 silly gunzTarPerm modified mode [ 'examples/demo.js', 438, 420 ]
92 silly gunzTarPerm extractEntry examples/ex03_ping_pong.js
93 silly gunzTarPerm modified mode [ 'examples/ex03_ping_pong.js', 438, 420 ]
94 silly gunzTarPerm extractEntry examples/quickIntro_multiThread.js
95 silly gunzTarPerm modified mode [ 'examples/quickIntro_multiThread.js', 438, 420 ]
96 silly gunzTarPerm extractEntry examples/ex04_main.js
97 silly gunzTarPerm modified mode [ 'examples/ex04_main.js', 438, 420 ]
98 silly gunzTarPerm extractEntry examples/quickIntro_multiThreadEvented.js
99 silly gunzTarPerm modified mode [ 'examples/quickIntro_multiThreadEvented.js', 438, 420 ]
100 silly gunzTarPerm extractEntry examples/ex04_worker.js
101 silly gunzTarPerm modified mode [ 'examples/ex04_worker.js', 438, 420 ]
102 silly gunzTarPerm extractEntry examples/quickIntro_fiveThreads.js
103 silly gunzTarPerm modified mode [ 'examples/quickIntro_fiveThreads.js', 438, 420 ]
104 silly gunzTarPerm extractEntry examples/ex05_pool.js
105 silly gunzTarPerm modified mode [ 'examples/ex05_pool.js', 438, 420 ]
106 silly gunzTarPerm extractEntry examples/quickIntro_evented_childThreadCode.js
107 silly gunzTarPerm modified mode [ 'examples/quickIntro_evented_childThreadCode.js', 438, 420 ]
108 silly gunzTarPerm extractEntry examples/ex01_basic.js
109 silly gunzTarPerm modified mode [ 'examples/ex01_basic.js', 438, 420 ]
110 silly gunzTarPerm extractEntry examples/ex02_events.js
111 silly gunzTarPerm modified mode [ 'examples/ex02_events.js', 438, 420 ]
112 silly gunzTarPerm extractEntry examples/ex06_jason.js
113 silly gunzTarPerm modified mode [ 'examples/ex06_jason.js', 438, 420 ]
114 silly gunzTarPerm extractEntry examples/quickIntro_oneThread.js
115 silly gunzTarPerm modified mode [ 'examples/quickIntro_oneThread.js', 438, 420 ]
116 silly gunzTarPerm extractEntry examples/quickIntro_blocking.js
117 silly gunzTarPerm modified mode [ 'examples/quickIntro_blocking.js', 438, 420 ]
118 silly gunzTarPerm extractEntry examples/quickIntro_loop.js
119 silly gunzTarPerm modified mode [ 'examples/quickIntro_loop.js', 438, 420 ]
120 silly gunzTarPerm extractEntry examples/quickIntro_oneThreadEvented.js
121 silly gunzTarPerm modified mode [ 'examples/quickIntro_oneThreadEvented.js', 438, 420 ]
122 silly gunzTarPerm extractEntry examples/ex06_complex.js
123 silly gunzTarPerm modified mode [ 'examples/ex06_complex.js', 438, 420 ]
124 silly gunzTarPerm extractEntry examples/fiveThreads.ls
125 silly gunzTarPerm modified mode [ 'examples/fiveThreads.ls', 438, 420 ]
126 silly gunzTarPerm extractEntry examples/multiThreadEvented.ls
127 silly gunzTarPerm modified mode [ 'examples/multiThreadEvented.ls', 438, 420 ]
128 silly gunzTarPerm extractEntry examples/ex06_jason.md
129 silly gunzTarPerm modified mode [ 'examples/ex06_jason.md', 438, 420 ]
130 silly gunzTarPerm extractEntry examples/ex05_pool.md
131 silly gunzTarPerm modified mode [ 'examples/ex05_pool.md', 438, 420 ]
132 silly gunzTarPerm extractEntry examples/ex04_worker.md
133 silly gunzTarPerm modified mode [ 'examples/ex04_worker.md', 438, 420 ]
134 silly gunzTarPerm extractEntry examples/ex04_main.md
135 silly gunzTarPerm modified mode [ 'examples/ex04_main.md', 438, 420 ]
136 silly gunzTarPerm extractEntry examples/ex03_ping_pong.md
137 silly gunzTarPerm modified mode [ 'examples/ex03_ping_pong.md', 438, 420 ]
138 silly gunzTarPerm extractEntry examples/ex02_events.md
139 silly gunzTarPerm modified mode [ 'examples/ex02_events.md', 438, 420 ]
140 silly gunzTarPerm extractEntry examples/ex01_basic.md
141 silly gunzTarPerm modified mode [ 'examples/ex01_basic.md', 438, 420 ]
142 silly gunzTarPerm extractEntry test.ls
143 silly gunzTarPerm modified mode [ 'test.ls', 438, 420 ]
144 silly gunzTarPerm extractEntry package.ls
145 silly gunzTarPerm modified mode [ 'package.ls', 438, 420 ]
146 silly gunzTarPerm extractEntry src/load.js
147 silly gunzTarPerm modified mode [ 'src/load.js', 438, 420 ]
148 silly gunzTarPerm extractEntry src/createPool.js
149 silly gunzTarPerm modified mode [ 'src/createPool.js', 438, 420 ]
150 silly gunzTarPerm extractEntry src/events.js
151 silly gunzTarPerm modified mode [ 'src/events.js', 438, 420 ]
152 silly gunzTarPerm extractEntry src/thread_nextTick.js
153 silly gunzTarPerm modified mode [ 'src/thread_nextTick.js', 438, 420 ]
154 silly gunzTarPerm extractEntry src/worker.js
155 silly gunzTarPerm modified mode [ 'src/worker.js', 438, 420 ]
156 silly gunzTarPerm extractEntry src/createPool.ls
157 silly gunzTarPerm modified mode [ 'src/createPool.ls', 438, 420 ]
158 silly gunzTarPerm extractEntry src/bson.h
159 silly gunzTarPerm modified mode [ 'src/bson.h', 438, 420 ]
160 silly gunzTarPerm extractEntry src/events.js.c
161 silly gunzTarPerm modified mode [ 'src/events.js.c', 438, 420 ]
162 silly gunzTarPerm extractEntry src/events.ls
163 silly gunzTarPerm modified mode [ 'src/events.ls', 438, 420 ]
164 silly gunzTarPerm extractEntry src/jslib.cc
165 silly gunzTarPerm modified mode [ 'src/jslib.cc', 438, 420 ]
166 silly gunzTarPerm extractEntry src/bson.cc
167 silly gunzTarPerm modified mode [ 'src/bson.cc', 438, 420 ]
168 silly gunzTarPerm extractEntry src/load.js.c
169 silly gunzTarPerm modified mode [ 'src/load.js.c', 438, 420 ]
170 silly gunzTarPerm extractEntry src/load.ls
171 silly gunzTarPerm modified mode [ 'src/load.ls', 438, 420 ]
172 silly gunzTarPerm extractEntry src/queues_a_gogo.cc
173 silly gunzTarPerm modified mode [ 'src/queues_a_gogo.cc', 438, 420 ]
174 silly gunzTarPerm extractEntry src/WebWorkerThreads.cc
175 silly gunzTarPerm modified mode [ 'src/WebWorkerThreads.cc', 438, 420 ]
176 silly gunzTarPerm extractEntry src/thread_nextTick.js.c
177 silly gunzTarPerm modified mode [ 'src/thread_nextTick.js.c', 438, 420 ]
178 silly gunzTarPerm extractEntry src/thread_nextTick.ls
179 silly gunzTarPerm modified mode [ 'src/thread_nextTick.ls', 438, 420 ]
180 silly gunzTarPerm extractEntry src/createPool.js.c
181 silly gunzTarPerm modified mode [ 'src/createPool.js.c', 438, 420 ]
182 silly gunzTarPerm extractEntry src/worker.js.c
183 silly gunzTarPerm modified mode [ 'src/worker.js.c', 438, 420 ]
184 silly gunzTarPerm extractEntry src/worker.ls
185 silly gunzTarPerm modified mode [ 'src/worker.ls', 438, 420 ]
186 silly gunzTarPerm extractEntry test/ab.js
187 silly gunzTarPerm modified mode [ 'test/ab.js', 438, 420 ]
188 silly gunzTarPerm extractEntry test/test11_multi_callbacks.js
189 silly gunzTarPerm modified mode [ 'test/test11_multi_callbacks.js', 438, 420 ]
190 silly gunzTarPerm extractEntry test/test12_precompiled_vs_normal.js
191 silly gunzTarPerm modified mode [ 'test/test12_precompiled_vs_normal.js', 438, 420 ]
192 silly gunzTarPerm extractEntry test/test13_thread_nextTick_speed.js
193 silly gunzTarPerm modified mode [ 'test/test13_thread_nextTick_speed.js', 438, 420 ]
194 silly gunzTarPerm extractEntry test/test10_node_nextTick_speed.js
195 silly gunzTarPerm modified mode [ 'test/test10_node_nextTick_speed.js', 438, 420 ]
196 silly gunzTarPerm extractEntry test/test15_emit_ping_pong.js
197 silly gunzTarPerm modified mode [ 'test/test15_emit_ping_pong.js', 438, 420 ]
198 silly gunzTarPerm extractEntry test/test16_syntax_error_in_the_thread.js
199 silly gunzTarPerm modified mode [ 'test/test16_syntax_error_in_the_thread.js', 438, 420 ]
200 silly gunzTarPerm extractEntry test/test17_pool_pi.js
201 silly gunzTarPerm modified mode [ 'test/test17_pool_pi.js', 438, 420 ]
202 silly gunzTarPerm extractEntry test/test18_pool_any_as_fast_as_possible.js
203 silly gunzTarPerm modified mode [ 'test/test18_pool_any_as_fast_as_possible.js', 438, 420 ]
204 silly gunzTarPerm extractEntry test/test19_pool_emit_any_all.js
205 silly gunzTarPerm modified mode [ 'test/test19_pool_emit_any_all.js', 438, 420 ]
206 silly gunzTarPerm extractEntry test/test09_throw_from_the_callback.js
207 silly gunzTarPerm modified mode [ 'test/test09_throw_from_the_callback.js', 438, 420 ]
208 silly gunzTarPerm extractEntry test/test20_removeAllListeners.js
209 silly gunzTarPerm modified mode [ 'test/test20_removeAllListeners.js', 438, 420 ]
210 silly gunzTarPerm extractEntry test/test08_sigkill_leaks.js
211 silly gunzTarPerm modified mode [ 'test/test08_sigkill_leaks.js', 438, 420 ]
212 silly gunzTarPerm extractEntry test/test21_emit_ping_pong_big_string.js
213 silly gunzTarPerm modified mode [ 'test/test21_emit_ping_pong_big_string.js', 438, 420 ]
214 silly gunzTarPerm extractEntry test/test07_sigkill.js
215 silly gunzTarPerm modified mode [ 'test/test07_sigkill.js', 438, 420 ]
216 silly gunzTarPerm extractEntry test/test22_create_destroy_loop.js
217 silly gunzTarPerm modified mode [ 'test/test22_create_destroy_loop.js', 438, 420 ]
218 silly gunzTarPerm extractEntry test/test06_throw_from_the_thread.js
219 silly gunzTarPerm modified mode [ 'test/test06_throw_from_the_thread.js', 438, 420 ]
220 silly gunzTarPerm extractEntry test/test23_create_destroy_loop.js
221 silly gunzTarPerm modified mode [ 'test/test23_create_destroy_loop.js', 438, 420 ]
222 silly gunzTarPerm extractEntry test/test05_debugLeaksNoCallbacks.js
223 silly gunzTarPerm modified mode [ 'test/test05_debugLeaksNoCallbacks.js', 438, 420 ]
224 silly gunzTarPerm extractEntry test/test24_puts.js
225 silly gunzTarPerm modified mode [ 'test/test24_puts.js', 438, 420 ]
226 silly gunzTarPerm extractEntry test/test04_gc_versus_not_gc.js
227 silly gunzTarPerm modified mode [ 'test/test04_gc_versus_not_gc.js', 438, 420 ]
228 silly gunzTarPerm extractEntry test/test25_delete_puts.js
229 silly gunzTarPerm modified mode [ 'test/test25_delete_puts.js', 438, 420 ]
230 silly gunzTarPerm extractEntry test/test03_infiniteLoopFunction.js
231 silly gunzTarPerm modified mode [ 'test/test03_infiniteLoopFunction.js', 438, 420 ]
232 silly gunzTarPerm extractEntry test/test26_puts_with_many_args.js
233 silly gunzTarPerm modified mode [ 'test/test26_puts_with_many_args.js', 438, 420 ]
234 silly gunzTarPerm extractEntry test/test02_loop_as_fast_as_possible.js
235 silly gunzTarPerm modified mode [ 'test/test02_loop_as_fast_as_possible.js', 438, 420 ]
236 silly gunzTarPerm extractEntry test/test27_puts_event_loop.js
237 silly gunzTarPerm modified mode [ 'test/test27_puts_event_loop.js', 438, 420 ]
238 silly gunzTarPerm extractEntry test/test01_loop_as_fast_as_possible.js
239 silly gunzTarPerm modified mode [ 'test/test01_loop_as_fast_as_possible.js', 438, 420 ]
240 silly gunzTarPerm extractEntry test/test28_puts_nextTick_loop.js
241 silly gunzTarPerm modified mode [ 'test/test28_puts_nextTick_loop.js', 438, 420 ]
242 silly gunzTarPerm extractEntry test/test00_run_once_and_destroy.js
243 silly gunzTarPerm modified mode [ 'test/test00_run_once_and_destroy.js', 438, 420 ]
244 silly gunzTarPerm extractEntry test/test29_puts_callback_loop.js
245 silly gunzTarPerm modified mode [ 'test/test29_puts_callback_loop.js', 438, 420 ]
246 silly gunzTarPerm extractEntry test/test14_emit_once.js
247 silly gunzTarPerm modified mode [ 'test/test14_emit_once.js', 438, 420 ]
248 silly gunzTarPerm extractEntry binding.gyp
249 silly gunzTarPerm modified mode [ 'binding.gyp', 438, 420 ]
250 silly lockFile 7c417583-k-node-modules-webworker-threads tar://C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads
251 silly lockFile 7c417583-k-node-modules-webworker-threads tar://C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads
252 silly lockFile e843e24b-orker-threads-0-4-13-package-tgz tar://C:\Users\iBBY\AppData\Roaming\npm-cache\webworker-threads\0.4.13\package.tgz
253 silly lockFile e843e24b-orker-threads-0-4-13-package-tgz tar://C:\Users\iBBY\AppData\Roaming\npm-cache\webworker-threads\0.4.13\package.tgz
254 info preinstall webworker-threads@0.4.13
255 verbose readDependencies using package.json deps
256 verbose readDependencies using package.json deps
257 verbose cache add [ 'nan@0.8.x', null ]
258 verbose cache add name=undefined spec="nan@0.8.x" args=["nan@0.8.x",null]
259 verbose parsed url { protocol: null,
259 verbose parsed url   slashes: null,
259 verbose parsed url   auth: null,
259 verbose parsed url   host: null,
259 verbose parsed url   port: null,
259 verbose parsed url   hostname: null,
259 verbose parsed url   hash: null,
259 verbose parsed url   search: null,
259 verbose parsed url   query: null,
259 verbose parsed url   pathname: 'nan@0.8.x',
259 verbose parsed url   path: 'nan@0.8.x',
259 verbose parsed url   href: 'nan@0.8.x' }
260 verbose cache add name="nan" spec="0.8.x" args=["nan","0.8.x"]
261 verbose parsed url { protocol: null,
261 verbose parsed url   slashes: null,
261 verbose parsed url   auth: null,
261 verbose parsed url   host: null,
261 verbose parsed url   port: null,
261 verbose parsed url   hostname: null,
261 verbose parsed url   hash: null,
261 verbose parsed url   search: null,
261 verbose parsed url   query: null,
261 verbose parsed url   pathname: '0.8.x',
261 verbose parsed url   path: '0.8.x',
261 verbose parsed url   href: '0.8.x' }
262 verbose addNamed [ 'nan', '0.8.x' ]
263 verbose addNamed [ null, '>=0.8.0-0 <0.9.0-0' ]
264 silly lockFile 9d04b547-nan-0-8-x nan@0.8.x
265 verbose lock nan@0.8.x C:\Users\iBBY\AppData\Roaming\npm-cache\9d04b547-nan-0-8-x.lock
266 silly addNameRange { name: 'nan', range: '>=0.8.0-0 <0.9.0-0', hasData: false }
267 verbose url raw nan
268 verbose url resolving [ 'https://registry.npmjs.org/', './nan' ]
269 verbose url resolved https://registry.npmjs.org/nan
270 info trying registry request attempt 1 at 16:45:13
271 verbose etag "ARDQ81ENXNX1F9W06GIOP93F9"
272 http GET https://registry.npmjs.org/nan
273 http 304 https://registry.npmjs.org/nan
274 silly registry.get cb [ 304,
274 silly registry.get   { date: 'Mon, 02 Jun 2014 21:45:51 GMT',
274 silly registry.get     server: 'Apache',
274 silly registry.get     via: '1.1 varnish',
274 silly registry.get     'last-modified': 'Mon, 02 Jun 2014 14:49:36 GMT',
274 silly registry.get     'cache-control': 'max-age=1',
274 silly registry.get     etag: '"ARDQ81ENXNX1F9W06GIOP93F9"',
274 silly registry.get     'x-served-by': 'cache-lax1420-LAX',
274 silly registry.get     'x-cache': 'HIT',
274 silly registry.get     'x-cache-hits': '16',
274 silly registry.get     'x-timer': 'S1401745551.526840,VS0,VE161',
274 silly registry.get     vary: 'Accept',
274 silly registry.get     'content-length': '0',
274 silly registry.get     'keep-alive': 'timeout=10, max=50',
274 silly registry.get     connection: 'Keep-Alive' } ]
275 verbose etag nan from cache
276 silly addNameRange number 2 { name: 'nan', range: '>=0.8.0-0 <0.9.0-0', hasData: true }
277 silly addNameRange versions [ 'nan',
277 silly addNameRange   [ '0.3.0-wip',
277 silly addNameRange     '0.3.0-wip2',
277 silly addNameRange     '0.3.0',
277 silly addNameRange     '0.3.1',
277 silly addNameRange     '0.3.2',
277 silly addNameRange     '0.4.0',
277 silly addNameRange     '0.4.1',
277 silly addNameRange     '0.4.2',
277 silly addNameRange     '0.4.3',
277 silly addNameRange     '0.4.4',
277 silly addNameRange     '0.5.0',
277 silly addNameRange     '0.5.1',
277 silly addNameRange     '0.5.2',
277 silly addNameRange     '0.6.0',
277 silly addNameRange     '0.7.0',
277 silly addNameRange     '0.7.1',
277 silly addNameRange     '0.8.0',
277 silly addNameRange     '1.0.0',
277 silly addNameRange     '1.1.0',
277 silly addNameRange     '1.1.1',
277 silly addNameRange     '1.1.2' ] ]
278 verbose addNamed [ 'nan', '0.8.0' ]
279 verbose addNamed [ '0.8.0', '0.8.0' ]
280 silly lockFile 46761758-nan-0-8-0 nan@0.8.0
281 verbose lock nan@0.8.0 C:\Users\iBBY\AppData\Roaming\npm-cache\46761758-nan-0-8-0.lock
282 silly lockFile 46761758-nan-0-8-0 nan@0.8.0
283 silly lockFile 46761758-nan-0-8-0 nan@0.8.0
284 silly lockFile 9d04b547-nan-0-8-x nan@0.8.x
285 silly lockFile 9d04b547-nan-0-8-x nan@0.8.x
286 silly resolved [ { name: 'nan',
286 silly resolved     version: '0.8.0',
286 silly resolved     description: 'Native Abstractions for Node.js: C++ header for Node 0.8->0.12 compatibility',
286 silly resolved     main: 'include_dirs.js',
286 silly resolved     repository: { type: 'git', url: 'git://github.com/rvagg/nan.git' },
286 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
286 silly resolved     license: 'MIT',
286 silly resolved     readme: 'Native Abstractions for Node.js\n===============================\n\n**A header file filled with macro and utility goodness for making add-on development for Node.js easier across versions 0.8, 0.10 and 0.11, and eventually 0.12.**\n\n***Current version: 0.8.0*** *(See [nan.h](https://github.com/rvagg/nan/blob/master/nan.h) for complete ChangeLog)*\n\n[![NPM](https://nodei.co/npm/nan.png?downloads=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6)](https://nodei.co/npm/nan/)\n\nThanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.11/0.12, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\n\nThis project also contains some helper utilities that make addon development a bit more pleasant.\n\n * **[News & Updates](#news)**\n * **[Usage](#usage)**\n * **[Example](#example)**\n * **[API](#api)**\n\n<a name="news"></a>\n## News & Updates\n\n### Dec-2013: NanCString and NanRawString\n\nTwo new functions have been introduced to replace the functionality that\'s been provided by `NanFromV8String` until now. NanCString has sensible defaults so it\'s super easy to fetch a null-terminated c-style string out of a `v8::String`. `NanFromV8String` is still around and has defaults that allow you to pass a single handle to fetch a `char*` while `NanRawString` requires a little more attention to arguments.\n\n### Nov-2013: Node 0.11.9+ breaking V8 change\n\nThe version of V8 that\'s shipping with Node 0.11.9+ has changed the signature for new `Local`s to: `v8::Local<T>::New(isolate, value)`, i.e. introducing the `isolate` argument and therefore breaking all new `Local` declarations for previous versions. NAN 0.6+ now includes a `NanNewLocal<T>(value)` that can be used in place to work around this incompatibility and maintain compatibility with 0.8->0.11.9+ (minus a few early 0.11 releases).\n\nFor example, if you wanted to return a `null` on a callback you will have to change the argument from `v8::Local<v8::Value>::New(v8::Null())` to `NanNewLocal<v8::Value>(v8::Null())`.\n\n### Nov-2013: Change to binding.gyp `"include_dirs"` for NAN\n\nInclusion of NAN in a project\'s binding.gyp is now greatly simplified. You can now just use `"<!(node -e \\"require(\'nan\')\\")"` in your `"include_dirs"`, see example below (note Windows needs the quoting around `require` to be just right: `"require(\'nan\')"` with appropriate `\\` escaping).\n\n<a name="usage"></a>\n## Usage\n\nSimply add **NAN** as a dependency in the *package.json* of your Node addon:\n\n``` bash\n$ npm install --save nan\n```\n\nPull in the path to **NAN** in your *binding.gyp* so that you can use `#include "nan.h"` in your *.cpp* files:\n\n``` python\n"include_dirs" : [\n    "<!(node -e \\"require(\'nan\')\\")"\n]\n```\n\nThis works like a `-I<path-to-NAN>` when compiling your addon.\n\n<a name="example"></a>\n## Example\n\nSee **[LevelDOWN](https://github.com/rvagg/node-leveldown/pull/48)** for a full example of **NAN** in use.\n\nFor a simpler example, see the **[async pi estimation example](https://github.com/rvagg/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\n\nCompare to the current 0.10 version of this example, found in the [node-addon-examples](https://github.com/rvagg/node-addon-examples/tree/master/9_async_work) repository and also a 0.11 version of the same found [here](https://github.com/kkoopa/node-addon-examples/tree/5c01f58fc993377a567812597e54a83af69686d7/9_async_work).\n\nNote that there is no embedded version sniffing going on here and also the async work is made much simpler, see below for details on the `NanAsyncWorker` class.\n\n```c++\n// addon.cc\n#include <node.h>\n#include "nan.h"\n// ...\n\nusing namespace v8;\n\nvoid InitAll(Handle<Object> exports) {\n  exports->Set(NanSymbol("calculateSync"),\n    FunctionTemplate::New(CalculateSync)->GetFunction());\n\n  exports->Set(NanSymbol("calculateAsync"),\n    FunctionTemplate::New(CalculateAsync)->GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)\n```\n\n```c++\n// sync.h\n#include <node.h>\n#include "nan.h"\n\nNAN_METHOD(CalculateSync);\n```\n\n```c++\n// sync.cc\n#include <node.h>\n#include "nan.h"\n#include "sync.h"\n// ...\n\nusing namespace v8;\n\n// Simple synchronous access to the `Estimate()` function\nNAN_METHOD(CalculateSync) {\n  NanScope();\n\n  // expect a number as the first argument\n  int points = args[0]->Uint32Value();\n  double est = Estimate(points);\n\n  NanReturnValue(Number::New(est));\n}\n```\n\n```c++\n// async.cc\n#include <node.h>\n#include "nan.h"\n#include "async.h"\n\n// ...\n\nusing namespace v8;\n\nclass PiWorker : public NanAsyncWorker {\n public:\n  PiWorker(NanCallback *callback, int points)\n    : NanAsyncWorker(callback), points(points) {}\n  ~PiWorker() {}\n\n  // Executed inside the worker-thread.\n  // It is not safe to access V8, or V8 data structures\n  // here, so everything we need for input and output\n  // should go on `this`.\n  void Execute () {\n    estimate = Estimate(points);\n  }\n\n  // Executed when the async work is complete\n  // this function will be run inside the main event loop\n  // so it is safe to use V8 again\n  void HandleOKCallback () {\n    NanScope();\n\n    Local<Value> argv[] = {\n        Local<Value>::New(Null())\n      , Number::New(estimate)\n    };\n\n    callback->Call(2, argv);\n  };\n\n private:\n  int points;\n  double estimate;\n};\n\n// Asynchronous access to the `Estimate()` function\nNAN_METHOD(CalculateAsync) {\n  NanScope();\n\n  int points = args[0]->Uint32Value();\n  NanCallback *callback = new NanCallback(args[1].As<Function>());\n\n  NanAsyncQueueWorker(new PiWorker(callback, points));\n  NanReturnUndefined();\n}\n```\n\n<a name="api"></a>\n## API\n\n * <a href="#api_nan_method"><b><code>NAN_METHOD</code></b></a>\n * <a href="#api_nan_getter"><b><code>NAN_GETTER</code></b></a>\n * <a href="#api_nan_setter"><b><code>NAN_SETTER</code></b></a>\n * <a href="#api_nan_property_getter"><b><code>NAN_PROPERTY_GETTER</code></b></a>\n * <a href="#api_nan_property_setter"><b><code>NAN_PROPERTY_SETTER</code></b></a>\n * <a href="#api_nan_property_enumerator"><b><code>NAN_PROPERTY_ENUMERATOR</code></b></a>\n * <a href="#api_nan_property_deleter"><b><code>NAN_PROPERTY_DELETER</code></b></a>\n * <a href="#api_nan_property_query"><b><code>NAN_PROPERTY_QUERY</code></b></a>\n * <a href="#api_nan_index_getter"><b><code>NAN_INDEX_GETTER</code></b></a>\n * <a href="#api_nan_index_setter"><b><code>NAN_INDEX_SETTER</code></b></a>\n * <a href="#api_nan_index_enumerator"><b><code>NAN_INDEX_ENUMERATOR</code></b></a>\n * <a href="#api_nan_index_deleter"><b><code>NAN_INDEX_DELETER</code></b></a>\n * <a href="#api_nan_index_query"><b><code>NAN_INDEX_QUERY</code></b></a>\n * <a href="#api_nan_weak_callback"><b><code>NAN_WEAK_CALLBACK</code></b></a>\n * <a href="#api_nan_deprecated"><b><code>NAN_DEPRECATED</code></b></a>\n * <a href="#api_nan_inline"><b><code>NAN_INLINE</code></b></a> \n * <a href="#api_nan_new_local"><b><code>NanNewLocal</code></b></a>\n * <a href="#api_nan_return_value"><b><code>NanReturnValue</code></b></a>\n * <a href="#api_nan_return_undefined"><b><code>NanReturnUndefined</code></b></a>\n * <a href="#api_nan_return_null"><b><code>NanReturnNull</code></b></a>\n * <a href="#api_nan_return_empty_string"><b><code>NanReturnEmptyString</code></b></a>\n * <a href="#api_nan_scope"><b><code>NanScope</code></b></a>\n * <a href="#api_nan_locker"><b><code>NanLocker</code></b></a>\n * <a href="#api_nan_unlocker"><b><code>NanUnlocker</code></b></a>\n * <a href="#api_nan_get_internal_field_pointer"><b><code>NanGetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_set_internal_field_pointer"><b><code>NanSetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_object_wrap_handle"><b><code>NanObjectWrapHandle</code></b></a>\n * <a href="#api_nan_make_weak"><b><code>NanMakeWeak</code></b></a>\n * <a href="#api_nan_symbol"><b><code>NanSymbol</code></b></a>\n * <a href="#api_nan_get_pointer_safe"><b><code>NanGetPointerSafe</code></b></a>\n * <a href="#api_nan_set_pointer_safe"><b><code>NanSetPointerSafe</code></b></a>\n * <a href="#api_nan_raw_string"><b><code>NanRawString</code></b></a>\n * <a href="#api_nan_c_string"><b><code>NanCString</code></b></a>\n * <a href="#api_nan_from_v8_string"><b><code>NanFromV8String</code></b></a>\n * <a href="#api_nan_boolean_option_value"><b><code>NanBooleanOptionValue</code></b></a>\n * <a href="#api_nan_uint32_option_value"><b><code>NanUInt32OptionValue</code></b></a>\n * <a href="#api_nan_error"><b><code>NanError</code></b>, <b><code>NanTypeError</code></b>, <b><code>NanRangeError</code></b></a>\n * <a href="#api_nan_throw_error"><b><code>NanThrowError</code></b>, <b><code>NanThrowTypeError</code></b>, <b><code>NanThrowRangeError</code></b>, <b><code>NanThrowError(Handle<Value>)</code></b>, <b><code>NanThrowError(Handle<Value>, int)</code></b></a>\n * <a href="#api_nan_new_buffer_handle"><b><code>NanNewBufferHandle(char *, size_t, FreeCallback, void *)</code></b>, <b><code>NanNewBufferHandle(char *, uint32_t)</code></b>, <b><code>NanNewBufferHandle(uint32_t)</code></b></a>\n * <a href="#api_nan_buffer_use"><b><code>NanBufferUse(char *, uint32_t)</code></b></a>\n * <a href="#api_nan_new_context_handle"><b><code>NanNewContextHandle</code></b></a>\n * <a href="#api_nan_has_instance"><b><code>NanHasInstance</code></b></a>\n * <a href="#api_nan_persistent_to_local"><b><code>NanPersistentToLocal</code></b></a>\n * <a href="#api_nan_dispose_persistent"><b><code>NanDisposePersistent</code></b></a>\n * <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a>\n * <a href="#api_nan_init_persistent"><b><code>NanInitPersistent</code></b></a>\n * <a href="#api_nan_callback"><b><code>NanCallback</code></b></a>\n * <a href="#api_nan_async_worker"><b><code>NanAsyncWorker</code></b></a>\n * <a href="#api_nan_async_queue_worker"><b><code>NanAsyncQueueWorker</code></b></a>\n\n<a name="api_nan_method"></a>\n### NAN_METHOD(methodname)\n\nUse `NAN_METHOD` to define your V8 accessible methods:\n\n```c++\n// .h:\nclass Foo : public node::ObjectWrap {\n  ...\n\n  static NAN_METHOD(Bar);\n  static NAN_METHOD(Baz);\n}\n\n\n// .cc:\nNAN_METHOD(Foo::Bar) {\n  ...\n}\n\nNAN_METHOD(Foo::Baz) {\n  ...\n}\n```\n\nThe reason for this macro is because of the method signature change in 0.11:\n\n```c++\n// 0.10 and below:\nHandle<Value> name(const Arguments& args)\n\n// 0.11 and above\nvoid name(const FunctionCallbackInfo<Value>& args)\n```\n\nThe introduction of `FunctionCallbackInfo` brings additional complications:\n\n<a name="api_nan_getter"></a>\n### NAN_GETTER(methodname)\n\nUse `NAN_GETTER` to declare your V8 accessible getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act like the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_GETTER`.\n\n<a name="api_nan_setter"></a>\n### NAN_SETTER(methodname)\n\nUse `NAN_SETTER` to declare your V8 accessible setters. Same as `NAN_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_getter"></a>\n### NAN_PROPERTY_GETTER(cbname)\nUse `NAN_PROPERTY_GETTER` to declare your V8 accessible property getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_GETTER`.\n\n<a name="api_nan_property_setter"></a>\n### NAN_PROPERTY_SETTER(cbname)\nUse `NAN_PROPERTY_SETTER` to declare your V8 accessible property setters. Same as `NAN_PROPERTY_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_enumerator"></a>\n### NAN_PROPERTY_ENUMERATOR(cbname)\nUse `NAN_PROPERTY_ENUMERATOR` to declare your V8 accessible property enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_PROPERTY_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_ENUMERATOR`.\n\n<a name="api_nan_property_deleter"></a>\n### NAN_PROPERTY_DELETER(cbname)\nUse `NAN_PROPERTY_DELETER` to declare your V8 accessible property deleters. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_DELETER`.\n\n<a name="api_nan_property_query"></a>\n### NAN_PROPERTY_QUERY(cbname)\nUse `NAN_PROPERTY_QUERY` to declare your V8 accessible property queries. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_QUERY`.\n\n<a name="api_nan_index_getter"></a>\n### NAN_INDEX_GETTER(cbname)\nUse `NAN_INDEX_GETTER` to declare your V8 accessible index getters. You get a `uint32_t` `index` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_GETTER`.\n\n<a name="api_nan_index_setter"></a>\n### NAN_INDEX_SETTER(cbname)\nUse `NAN_INDEX_SETTER` to declare your V8 accessible index setters. Same as `NAN_INDEX_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_index_enumerator"></a>\n### NAN_INDEX_ENUMERATOR(cbname)\nUse `NAN_INDEX_ENUMERATOR` to declare your V8 accessible index enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_INDEX_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_ENUMERATOR`.\n\n<a name="api_nan_index_deleter"></a>\n### NAN_INDEX_DELETER(cbname)\nUse `NAN_INDEX_DELETER` to declare your V8 accessible index deleters. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_DELETER`.\n\n<a name="api_nan_index_query"></a>\n### NAN_INDEX_QUERY(cbname)\nUse `NAN_INDEX_QUERY` to declare your V8 accessible index queries. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_QUERY`.\n\n<a name="api_nan_weak_callback"></a>\n### NAN_WEAK_CALLBACK(type, cbname)\n\nUse `NAN_WEAK_CALLBACK` to declare your V8 WeakReference callbacks. There is an object argument accessible through `NAN_WEAK_CALLBACK_OBJECT`. The `type` argument gives the type of the `data` argument, accessible through `NAN_WEAK_CALLBACK_DATA(type)`.\n\n```c++\nstatic NAN_WEAK_CALLBACK(BufferReference*, WeakCheck) {\n  if (NAN_WEAK_CALLBACK_DATA(BufferReference*)->noLongerNeeded_) {\n    delete NAN_WEAK_CALLBACK_DATA(BufferReference*);\n  } else {\n    // Still in use, revive, prevent GC\n    NanMakeWeak(NAN_WEAK_CALLBACK_OBJECT, NAN_WEAK_CALLBACK_DATA(BufferReference*), &WeakCheck);\n  }\n}\n```\n\n<a name="api_nan_deprecated"></a>\n### NAN_DEPRECATED(declarator)\nDeclares a function as deprecated. Identical to `V8_DEPRECATED`.\n\n```c++\nstatic NAN_DEPRECATED(NAN_METHOD(foo)) {\n  ...\n}\n```\n\n<a name="api_nan_inline"></a>\n### NAN_INLINE(declarator)\nInlines a function. Identical to `V8_INLINE`.\n\n```c++\nstatic NAN_INLINE(int foo(int bar)) {\n  ...\n}\n```\n\n<a name="api_nan_new_local"></a>\n### NanNewLocal&lt;T&gt;(Handle&lt;Value&gt;)\n\nUse `NanNewLocal` in place of `v8::Local<T>::New(...)` as this function\nrequires an `isolate` argument in recent versions of V8 but not in older versions.\n\n```c++\nNanNewLocal<v8::Value>(v8::Null())\n```\n\n<a name="api_nan_return_value"></a>\n### NanReturnValue(Handle&lt;Value&gt;)\n\nUse `NanReturnValue` when you want to return a value from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  ...\n\n  NanReturnValue(String::New("FooBar!"));\n}\n```\n\nNo `return` statement required.\n\n<a name="api_nan_return_undefined"></a>\n### NanReturnUndefined()\n\nUse `NanReturnUndefined` when you don\'t want to return anything from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnUndefined();\n}\n```\n\n<a name="api_nan_return_null"></a>\n### NanReturnNull()\n\nUse `NanReturnNull` when you want to return `Null` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnNull();\n}\n```\n\n<a name="api_nan_return_empty_string"></a>\n### NanReturnEmptyString()\n\nUse `NanReturnEmptyString` when you want to return an empty `String` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnEmptyString();\n}\n```\n\n<a name="api_nan_scope"></a>\n### NanScope()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanScope()` necessary, use it in place of `HandleScope scope`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanScope();\n\n  NanReturnValue(String::New("FooBar!"));\n}\n```\n\n<a name="api_nan_locker"></a>\n### NanLocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanLocker()` necessary, use it in place of `Locker locker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_unlocker"></a>\n### NanUnlocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanUnlocker()` necessary, use it in place of `Unlocker unlocker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_get_internal_field_pointer"></a>\n### void * NanGetInternalFieldPointer(Handle&lt;Object&gt;, int)\n\nGets a pointer to the internal field with at `index` from a V8 `Object` handle.\n\n```c++\nLocal<Object> obj;\n...\nNanGetInternalFieldPointer(obj, 0);\n```\n<a name="api_nan_set_internal_field_pointer"></a>\n### void NanSetInternalFieldPointer(Handle&lt;Object&gt;, int, void *)\n\nSets the value of the internal field at `index` on a V8 `Object` handle.\n\n```c++\nstatic Persistent<Function> dataWrapperCtor;\n...\nLocal<Object> wrapper = NanPersistentToLocal(dataWrapperCtor)->NewInstance();\nNanSetInternalFieldPointer(wrapper, 0, this);\n```\n\n<a name="api_nan_object_wrap_handle"></a>\n### Local&lt;Object&gt; NanObjectWrapHandle(Object)\n\nWhen you want to fetch the V8 object handle from a native object you\'ve wrapped with Node\'s `ObjectWrap`, you should use `NanObjectWrapHandle`:\n\n```c++\nNanObjectWrapHandle(iterator)->Get(String::NewSymbol("end"))\n```\n\n<a name="api_nan_make_weak"></a>\n### NanMakeWeak(Persistent&lt;T&gt;, parameter, callback)\n\nMake a persistent reference weak.\n\n<a name="api_nan_symbol"></a>\n### String NanSymbol(char *)\n\nThis isn\'t strictly about compatibility, it\'s just an easier way to create string symbol objects (i.e. `String::NewSymbol(x)`), for getting and setting object properties, or names of objects.\n\n```c++\nbool foo = false;\nif (obj->Has(NanSymbol("foo")))\n  foo = optionsObj->Get(NanSymbol("foo"))->BooleanValue()\n```\n\n<a name="api_nan_get_pointer_safe"></a>\n### Type NanGetPointerSafe(Type *[, Type])\n\nA helper for getting values from optional pointers. If the pointer is `NULL`, the function returns the optional default value, which defaults to `0`.  Otherwise, the function returns the value the pointer points to.\n\n```c++\nchar *plugh(uint32_t *optional) {\n  char res[] = "xyzzy";\n  uint32_t param = NanGetPointerSafe<uint32_t>(optional, 0x1337);\n  switch (param) {\n    ...\n  }\n  NanSetPointerSafe<uint32_t>(optional, 0xDEADBEEF);\n}  \n```\n\n<a name="api_nan_set_pointer_safe"></a>\n### bool NanSetPointerSafe(Type *, Type)\n\nA helper for setting optional argument pointers. If the pointer is `NULL`, the function simply return `false`.  Otherwise, the value is assigned to the variable the pointer points to.\n\n```c++\nconst char *plugh(size_t *outputsize) {\n  char res[] = "xyzzy";\n  if !(NanSetPointerSafe<size_t>(outputsize, strlen(res) + 1)) {\n    ...\n  }\n\n  ...\n}\n```\n\n<a name="api_nan_raw_string"></a>\n### void* NanRawString(Handle&lt;Value&gt;, enum Nan::Encoding, size_t *, void *, size_t, int)\n\nWhen you want to convert a V8 `String` to a `char*` buffer, use `NanRawString`. You have to supply an encoding as well as a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows setting `String::WriteOptions`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nvoid* decoded = NanRawString(args[1], Nan::BASE64, &count, NULL, 0, String::HINT_MANY_WRITES_EXPECTED);\nchar param_copy[count];\nmemcpy(param_copy, decoded, count);\ndelete[] decoded;\n```\n\n<a name="api_nan_c_string"></a>\n### char* NanCString(Handle&lt;Value&gt;, size_t *[, char *, size_t, int])\n\nWhen you want to convert a V8 `String` to a null-terminated C `char*` use `NanCString`. The resulting `char*` will be UTF-8-encoded, and you need to supply a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows optionally setting `String::WriteOptions`, which default to `v8::String::NO_OPTIONS`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nchar* name = NanCString(args[0], &count);\n```\n\n<a name="api_nan_from_v8_string"></a>\n### char* NanFromV8String(Handle&lt;Value&gt;[, enum Nan::Encoding, size_t *, char *, size_t, int])\n\nA convenience function that uses `NanRawString()` to convert a V8 `String` to a `char*`. Defaults to UTF8 encoding and no null-termination.\n\n```c++\nsize_t count;\nchar* name = NanFromV8String(args[0]);\n```\n\n<a name="api_nan_boolean_option_value"></a>\n### bool NanBooleanOptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;[, bool])\n\nWhen you have an "options" object that you need to fetch properties from, boolean options can be fetched with this pair. They check first if the object exists (`IsEmpty`), then if the object has the given property (`Has`) then they get and convert/coerce the property to a `bool`.\n\nThe optional last parameter is the *default* value, which is `false` if left off:\n\n```c++\n// `foo` is false unless the user supplies a truthy value for it\nbool foo = NanBooleanOptionValue(optionsObj, NanSymbol("foo"));\n// `bar` is true unless the user supplies a falsy value for it\nbool bar = NanBooleanOptionValueDefTrue(optionsObj, NanSymbol("bar"), true);\n```\n\n<a name="api_nan_uint32_option_value"></a>\n### uint32_t NanUInt32OptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;, uint32_t)\n\nSimilar to `NanBooleanOptionValue`, use `NanUInt32OptionValue` to fetch an integer option from your options object. Can be any kind of JavaScript `Number` and it will be coerced to an unsigned 32-bit integer.\n\nRequires all 3 arguments as a default is not optional:\n\n```c++\nuint32_t count = NanUInt32OptionValue(optionsObj, NanSymbol("count"), 1024);\n```\n\n<a name="api_nan_error"></a>\n### NanError(message), NanTypeError(message), NanRangeError(message)\n\nFor making `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nLocal<Value> res = NanError("you must supply a callback argument");\n```\n\n<a name="api_nan_throw_error"></a>\n### NanThrowError(message), NanThrowTypeError(message), NanThrowRangeError(message), NanThrowError(Local&lt;Value&gt;), NanThrowError(Local&lt;Value&gt;, int)\n\nFor throwing `Error`, `TypeError` and `RangeError` objects. You should `return` this call:\n\n```c++\nreturn NanThrowError("you must supply a callback argument");\n```\n\nCan also handle any custom object you may want to throw. If used with the error code argument, it will add the supplied error code to the error object as a property called `code`.\n\n<a name="api_nan_new_buffer_handle"></a>\n### Local&lt;Object&gt; NanNewBufferHandle(char *, uint32_t), Local&lt;Object&gt; NanNewBufferHandle(uint32_t)\n\nThe `Buffer` API has changed a little in Node 0.11, this helper provides consistent access to `Buffer` creation:\n\n```c++\nNanNewBufferHandle((char*)value.data(), value.size());\n```\n\nCan also be used to initialize a `Buffer` with just a `size` argument.\n\nCan also be supplied with a `NAN_WEAK_CALLBACK` and a hint for the garbage collector, when dealing with weak references.\n\n<a name="api_nan_buffer_use"></a>\n### Local&lt;Object&gt; NanBufferUse(char*, uint32_t)\n\n`Buffer::New(char*, uint32_t)` prior to 0.11 would make a copy of the data.\nWhile it was possible to get around this, it required a shim by passing a\ncallback. So the new API `Buffer::Use(char*, uint32_t)` was introduced to remove\nneeding to use this shim.\n\n`NanBufferUse` uses the `char*` passed as the backing data, and will free the\nmemory automatically when the weak callback is called. Keep this in mind, as\ncareless use can lead to "double free or corruption" and other cryptic failures.\n\n<a name="api_nan_has_instance"></a>\n### bool NanHasInstance(Persistent&lt;FunctionTemplate&gt;&, Handle&lt;Value&gt;)\n\nCan be used to check the type of an object to determine it is of a particular class you have already defined and have a `Persistent<FunctionTemplate>` handle for.\n\n<a name="api_nan_persistent_to_local"></a>\n### Local&lt;Type&gt; NanPersistentToLocal(Persistent&lt;Type&gt;&)\n\nAside from `FunctionCallbackInfo`, the biggest and most painful change to V8 in Node 0.11 is the many restrictions now placed on `Persistent` handles. They are difficult to assign and difficult to fetch the original value out of.\n\nUse `NanPersistentToLocal` to convert a `Persistent` handle back to a `Local` handle.\n\n```c++\nLocal<Object> handle = NanPersistentToLocal(persistentHandle);\n```\n\n<a href="#api_nan_new_context_handle">\n### Local&lt;Context&gt; NanNewContextHandle([ExtensionConfiguration*, Handle&lt;ObjectTemplate&gt;, Handle&lt;Value&gt;])\nCreates a new `Local<Context>` handle.\n\n```c++\nLocal<FunctionTemplate> ftmpl = FunctionTemplate::New();\nLocal<ObjectTemplate> otmpl = ftmpl->InstanceTemplate();\nLocal<Context> ctx =  NanNewContextHandle(NULL, otmpl);\n```\n\n<a name="api_nan_dispose_persistent"></a>\n### void NanDisposePersistent(Persistent&lt;T&gt; &)\n\nUse `NanDisposePersistent` to dispose a `Persistent` handle.\n\n```c++\nNanDisposePersistent(persistentHandle);\n```\n\n<a name="api_nan_assign_persistent"></a>\n### NanAssignPersistent(type, handle, object)\n\nUse `NanAssignPersistent` to assign a non-`Persistent` handle to a `Persistent` one. You can no longer just declare a `Persistent` handle and assign directly to it later, you have to `Reset` it in Node 0.11, so this makes it easier.\n\nIn general it is now better to place anything you want to protect from V8\'s garbage collector as properties of a generic `Object` and then assign that to a `Persistent`. This works in older versions of Node also if you use `NanAssignPersistent`:\n\n```c++\nPersistent<Object> persistentHandle;\n\n...\n\nLocal<Object> obj = Object::New();\nobj->Set(NanSymbol("key"), keyHandle); // where keyHandle might be a Local<String>\nNanAssignPersistent(Object, persistentHandle, obj)\n```\n\n<a name="api_nan_init_persistent"></a>\n### NanInitPersistent(type, name, object)\n\nUser `NanInitPersistent` to declare and initialize a new `Persistent` with the supplied object. The assignment operator for `Persistent` is no longer public in Node 0.11, so this macro makes it easier to declare and initializing a new `Persistent`. See <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a> for more information.\n\n```c++\nLocal<Object> obj = Object::New();\nobj->Set(NanSymbol("key"), keyHandle); // where keyHandle might be a Local<String>\nNanInitPersistent(Object, persistentHandle, obj);\n```\n\n<a name="api_nan_callback"></a>\n### NanCallback\n\nBecause of the difficulties imposed by the changes to `Persistent` handles in V8 in Node 0.11, creating `Persistent` versions of your `Handle<Function>` is annoyingly tricky. `NanCallback` makes it easier by taking your handle, making it persistent until the `NanCallback` is deleted and even providing a handy `Call()` method to fetch and execute the callback `Function`.\n\n```c++\nLocal<Function> callbackHandle = args[0].As<Function>();\nNanCallback *callback = new NanCallback(callbackHandle);\n// pass `callback` around and it\'s safe from GC until you:\ndelete callback;\n```\n\nYou can execute the callback like so:\n\n```c++\n// no arguments:\ncallback->Call(0, NULL);\n\n// an error argument:\nHandle<Value> argv[] = {\n  Exception::Error(String::New("fail!"))\n};\ncallback->Call(1, argv);\n\n// a success argument:\nHandle<Value> argv[] = {\n  Null(),\n  String::New("w00t!")\n};\ncallback->Call(2, argv);\n```\n\n`NanCallback` also has a `Local<Function> GetCallback()` method that you can use\nto fetch a local handle to the underlying callback function, as well  as a\n`void SetFunction(Handle<Function>)` for setting the callback on the\n`NanCallback`.  Additionally a generic constructor is available for using\n`NanCallback` without performing heap allocations.\n\n<a name="api_nan_async_worker"></a>\n### NanAsyncWorker\n\n`NanAsyncWorker` is an abstract class that you can subclass to have much of the annoying async queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the async work is in progress.\n\nSee a rough outline of the implementation:\n\n```c++\nclass NanAsyncWorker {\npublic:\n  NanAsyncWorker (NanCallback *callback);\n\n  // Clean up persistent handles and delete the *callback\n  virtual ~NanAsyncWorker ();\n\n  // Check the `char *errmsg` property and call HandleOKCallback()\n  // or HandleErrorCallback depending on whether it has been set or not\n  virtual void WorkComplete ();\n\n  // You must implement this to do some async work. If there is an\n  // error then allocate `errmsg` to to a message and the callback will\n  // be passed that string in an Error object\n  virtual void Execute ();\n\n  // Save a V8 object in a Persistent handle to protect it from GC\n  void SavePersistent(const char *key, Local<Object> &obj);\n\n  // Fetch a stored V8 object (don\'t call from within `Execute()`)\n  Local<Object> GetFromPersistent(const char *key);\n\nprotected:\n  // Set this if there is an error, otherwise it\'s NULL\n  const char *errmsg;\n\n  // Default implementation calls the callback function with no arguments.\n  // Override this to return meaningful data\n  virtual void HandleOKCallback ();\n\n  // Default implementation calls the callback function with an Error object\n  // wrapping the `errmsg` string\n  virtual void HandleErrorCallback ();\n};\n```\n\n<a name="api_nan_async_queue_worker"></a>\n### NanAsyncQueueWorker(NanAsyncWorker *)\n\n`NanAsyncQueueWorker` will run a `NanAsyncWorker` asynchronously via libuv. Both the *execute* and *after_work* steps are taken care of for you&mdash;most of the logic for this is embedded in `NanAsyncWorker`.\n\n### Contributors\n\nNAN is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align="left">Rod Vagg</th><td><a href="https://github.com/rvagg">GitHub/rvagg</a></td><td><a href="http://twitter.com/rvagg">Twitter/@rvagg</a></td></tr>\n<tr><th align="left">Benjamin Byholm</th><td><a href="https://github.com/kkoopa/">GitHub/kkoopa</a></td></tr>\n<tr><th align="left">Trevor Norris</th><td><a href="https://github.com/trevnorris">GitHub/trevnorris</a></td><td><a href="http://twitter.com/trevnorris">Twitter/@trevnorris</a></td></tr>\n<tr><th align="left">Nathan Rajlich</th><td><a href="https://github.com/TooTallNate">GitHub/TooTallNate</a></td><td><a href="http://twitter.com/TooTallNate">Twitter/@TooTallNate</a></td></tr>\n<tr><th align="left">Brett Lawson</th><td><a href="https://github.com/brett19">GitHub/brett19</a></td><td><a href="http://twitter.com/brett19x">Twitter/@brett19x</a></td></tr>\n<tr><th align="left">Ben Noordhuis</th><td><a href="https://github.com/bnoordhuis">GitHub/bnoordhuis</a></td><td><a href="http://twitter.com/bnoordhuis">Twitter/@bnoordhuis</a></td></tr>\n</tbody></table>\n\nLicence &amp; copyright\n-----------------------\n\nCopyright (c) 2013 NAN contributors (listed above).\n\nNative Abstractions for Node.js is licensed under an MIT +no-false-attribs license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n',
286 silly resolved     readmeFilename: 'README.md',
286 silly resolved     bugs: { url: 'https://github.com/rvagg/nan/issues' },
286 silly resolved     homepage: 'https://github.com/rvagg/nan',
286 silly resolved     _id: 'nan@0.8.0',
286 silly resolved     _from: 'nan@0.8.x' } ]
287 info install nan@0.8.0 into C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads
288 info installOne nan@0.8.0
289 info C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads\node_modules\nan unbuild
290 verbose tar unpack C:\Users\iBBY\AppData\Roaming\npm-cache\nan\0.8.0\package.tgz
291 silly lockFile 32946c71-bworker-threads-node-modules-nan tar://C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads\node_modules\nan
292 verbose lock tar://C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads\node_modules\nan C:\Users\iBBY\AppData\Roaming\npm-cache\32946c71-bworker-threads-node-modules-nan.lock
293 silly lockFile 9fcb4238--npm-cache-nan-0-8-0-package-tgz tar://C:\Users\iBBY\AppData\Roaming\npm-cache\nan\0.8.0\package.tgz
294 verbose lock tar://C:\Users\iBBY\AppData\Roaming\npm-cache\nan\0.8.0\package.tgz C:\Users\iBBY\AppData\Roaming\npm-cache\9fcb4238--npm-cache-nan-0-8-0-package-tgz.lock
295 silly gunzTarPerm modes [ '755', '644' ]
296 silly gunzTarPerm extractEntry package.json
297 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
298 silly gunzTarPerm extractEntry README.md
299 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
300 silly gunzTarPerm extractEntry LICENSE
301 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
302 silly gunzTarPerm extractEntry include_dirs.js
303 silly gunzTarPerm modified mode [ 'include_dirs.js', 438, 420 ]
304 silly gunzTarPerm extractEntry .dntrc
305 silly gunzTarPerm modified mode [ '.dntrc', 438, 420 ]
306 silly gunzTarPerm extractEntry build/config.gypi
307 silly gunzTarPerm modified mode [ 'build/config.gypi', 438, 420 ]
308 silly gunzTarPerm extractEntry nan.h
309 silly gunzTarPerm modified mode [ 'nan.h', 438, 420 ]
310 silly lockFile 32946c71-bworker-threads-node-modules-nan tar://C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads\node_modules\nan
311 silly lockFile 32946c71-bworker-threads-node-modules-nan tar://C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads\node_modules\nan
312 silly lockFile 9fcb4238--npm-cache-nan-0-8-0-package-tgz tar://C:\Users\iBBY\AppData\Roaming\npm-cache\nan\0.8.0\package.tgz
313 silly lockFile 9fcb4238--npm-cache-nan-0-8-0-package-tgz tar://C:\Users\iBBY\AppData\Roaming\npm-cache\nan\0.8.0\package.tgz
314 info preinstall nan@0.8.0
315 verbose readDependencies using package.json deps
316 verbose readDependencies using package.json deps
317 silly resolved []
318 verbose about to build C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads\node_modules\nan
319 info build C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads\node_modules\nan
320 verbose linkStuff [ false,
320 verbose linkStuff   false,
320 verbose linkStuff   false,
320 verbose linkStuff   'C:\\mgl-proyecto-nodejs\\erik\\node_modules\\webworker-threads\\node_modules' ]
321 info linkStuff nan@0.8.0
322 verbose linkBins nan@0.8.0
323 verbose linkMans nan@0.8.0
324 verbose rebuildBundles nan@0.8.0
325 info install nan@0.8.0
326 info postinstall nan@0.8.0
327 verbose about to build C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads
328 info build C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads
329 verbose linkStuff [ false,
329 verbose linkStuff   false,
329 verbose linkStuff   false,
329 verbose linkStuff   'C:\\mgl-proyecto-nodejs\\erik\\node_modules' ]
330 info linkStuff webworker-threads@0.4.13
331 verbose linkBins webworker-threads@0.4.13
332 verbose linkMans webworker-threads@0.4.13
333 verbose rebuildBundles webworker-threads@0.4.13
334 verbose rebuildBundles [ 'nan' ]
335 info install webworker-threads@0.4.13
336 verbose unsafe-perm in lifecycle true
337 info webworker-threads@0.4.13 Failed to exec install script
338 info C:\mgl-proyecto-nodejs\erik\node_modules\webworker-threads unbuild
339 info preuninstall webworker-threads@0.4.13
340 info uninstall webworker-threads@0.4.13
341 verbose true,C:\mgl-proyecto-nodejs\erik\node_modules,C:\mgl-proyecto-nodejs\erik\node_modules unbuild webworker-threads@0.4.13
342 info postuninstall webworker-threads@0.4.13
343 error webworker-threads@0.4.13 install: `node-gyp rebuild`
343 error Exit status 1
344 error Failed at the webworker-threads@0.4.13 install script.
344 error This is most likely a problem with the webworker-threads package,
344 error not with npm itself.
344 error Tell the author that this fails on your system:
344 error     node-gyp rebuild
344 error You can get their info via:
344 error     npm owner ls webworker-threads
344 error There is likely additional logging output above.
345 error System Windows_NT 6.1.7601
346 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "webworker-threads"
347 error cwd C:\mgl-proyecto-nodejs\erik
348 error node -v v0.10.26
349 error npm -v 1.4.3
350 error code ELIFECYCLE
351 verbose exit [ 1, true ]
